<|-x-x-x-x-x-x-x-x-x-x-x-|aula03|-x-x-x-x-x-x-x-x-x-x-x-x-|>
=> O objetivo desta aula é implementar um sistema de cadastro de usuários na nossa aplicação. 
Ao final, você conseguirá cadastrar, listar, alterar e deletar usuários, além de realizar 
testes para validar estas funcionalidades.

<|-x-x-x-x-x-x-x-x-x-x-x-|aula03|-x-x-x-x-x-x-x-x-x-x-x-x-|>
=>CRUD e HTTP
No desenvolvimento de APIs, existem quatro ações principais que fazemos com os dados: criar, ler, 
atualizar e excluir. Essas ações ajudam a gerenciar os dados no banco de dados e na aplicação web. 
Vamos nos focar nesse primeiro momento nas relações entre os dados.

CRUD é um acrônimo que representa as quatro operações básicas que você pode realizar em qualquer 
banco de dados persistente:

Create (Criar): adicionar novos registros ao banco de dados.
Read (Ler): recuperar registros existentes do banco de dados.
Update (Atualizar): modificar registros existentes no banco de dados.
Delete (Excluir): remover registros existentes do banco de dados.

Com essas operações podemos realizar qualquer tipo de comportamento em uma base dados. Podemos criar um 
registro, em seguida alterá-lo, quem sabe depois disso tudo deletá-lo.


<|-x-x-x-x-x-x-x-x-x-x-x-|aula03|-x-x-x-x-x-x-x-x-x-x-x-x-|>
=> Quando falamos de APIs servindo dados, todas essas operações têm alguma forma similar no protocolo HTTP. 
O protocolo tem verbos para indicar essas mesmas ações que queremos representar no banco de dados.

POST: é usado para solicitar que o servidor aceite um dado (recurso) enviado pelo cliente.
GET: é usado para quando o cliente deseja requisitar uma informação do servidor.
PUT: é usando no momento em que o cliente deseja informar alguma alteração nos dados para o servidor.
DELETE: usado para dizer ao servidor que delete determinado recurso.

Dessa forma podemos criar associações entre os endpoints e a base de dados. Por exemplo: quando quisermos 
inserir um dado no banco de dados, nós como clientes devemos comunicar essa intenção ao servidor usando o 
método POST enviando os dados (em nosso caso no formato JSON) que devem ser persistidos na base de dados. 
Com isso iniciamos o processo de create na base de dados.


<|-x-x-x-x-x-x-x-x-x-x-x-|aula03|-x-x-x-x-x-x-x-x-x-x-x-x-|>
=> Respostas da API
Usamos códigos de status para informar ao cliente o resultado das operações no servidor, como se um dado foi 
criado, encontrado, atualizado ou excluído com sucesso. Por isso investiremos mais algum momento aqui.

Os códigos que devemos prestar atenção para responder corretamente as requisições. Os casos de sucesso incluem:

200 OK: Indica sucesso na requisição.
    GET: Quando um dado é solicitado e retornado com sucesso.
    PUT: Quando dados são alterados com sucesso.

201 CREATED: Significa que a solicitação resultou na criação de um novo recurso.
    POST: Aplicável quando um dado é enviado e criado com sucesso.
    PUT: Usado quando uma alteração resulta na criação de um novo recurso.

204 NO CONTENT: Retorno do servidor sem conteúdo na mensagem.
    PUT: Aplicável se a alteração não gerar um retorno.
    DELETE: Usado quando a ação de deletar não gera um retorno.


<|-x-x-x-x-x-x-x-x-x-x-x-|aula03|-x-x-x-x-x-x-x-x-x-x-x-x-|>
=> Os códigos de erro mais comuns que temos que conhecer para lidar com possíveis erros na aplicação, são:

404 NOT FOUND: O recurso solicitado não pôde ser encontrado.
422 UNPROCESSABLE ENTITY: o pedido foi bem formado (ou seja, sintaticamente correto), mas não pôde ser processado.
500 INTERNAL SERVER ERROR: Uma mensagem de erro genérica, dada quando uma condição inesperada foi encontrada. 
Geralmente ocorre quando nossa aplicação apresenta um erro.

Compreendendo esses códigos, estamos prontos para iniciar a implementação de alguns endpoints e 
colocar esses conceitos em prática.



<|-x-x-x-x-x-x-x-x-x-x-x-|aula03|-x-x-x-x-x-x-x-x-x-x-x-x-|>
=>Implementando endpoints
Para facilitar o aprendizado, sugiro dividir a criação de novos endpoints em três etapas:

01-Relação com o HTTP: Determinar o verbo HTTP esperado e os códigos de resposta 
para situações de sucesso e erro.

02-Modelos de Dados: Definir o formato do JSON esperado, campos e seus tipos, e pensar nos modelos 
de resposta para situações de sucesso e erro.

03-Implementação do Corpo: Decidir o tratamento dos dados recebidos e o tipo de processamento aplicado.

As duas primeiras etapas nos ajudam a definir a interface de comunicação e como ela será documentada. 
A terceira etapa é mais específica e envolve decisões sobre a interação com o banco de dados, 
validações adicionais e a definição do que constitui sucesso ou erro na requisição.

Essas etapas nos orientam na implementação completa do endpoint, garantindo que nada seja esquecido.


<|-x-x-x-x-x-x-x-x-x-x-x-|aula03|-x-x-x-x-x-x-x-x-x-x-x-x-|>
=> Iniciando a implementação da rota POST
Nesta aula, nosso foco principal será desenvolver um sistema de cadastro de usuários. 
Para isso, a implementação de uma forma eficiente para criar novos usuários na base de dados é essencial. 
Exploraremos como utilizar o verbo HTTP POST, fundamental para comunicar ao serviço a nossa intenção de enviar 
novos dados, como no cadastro de usuários.


<|-x-x-x-x-x-x-x-x-x-x-x-|aula03|-x-x-x-x-x-x-x-x-x-x-x-x-|>
=> Implementação do endpoint
Para iniciar, criaremos um endpoint que aceita o verbo POST com dados em formato JSON. Esse endpoint responderá 
com o status 201 em caso de sucesso na criação do recurso. Com isso, estabelecemos a base para a nossa funcionalidade de cadastro.
Usaremos o decorador @app.post() do FastAPI para definir nosso endpoint, que começará com a URL /users/, 
indicando onde receberemos os dados para criar novos usuários:

fast_zero/app.py

@app.post('/users/')
def create_user():


<|-x-x-x-x-x-x-x-x-x-x-x-|aula03|-x-x-x-x-x-x-x-x-x-x-x-x-|>
=> Status code de resposta
É crucial definir que, ao cadastrar um usuário com sucesso, o sistema deve retornar o código de resposta 201 CREATED, 
indicando a criação bem-sucedida do recurso. Para isso, adicionamos o parâmetro status_code ao decorador:

fast_zero/app.py

@app.post('/users/', status_code=HTTPStatus.CREATED)
def create_user():


<|-x-x-x-x-x-x-x-x-x-x-x-|aula03|-x-x-x-x-x-x-x-x-x-x-x-x-|>
=>Modelo de dados
O modelo de dados é uma parte fundamental, onde consideramos tanto os dados recebidos do cliente quanto os dados 
que serão retornados a ele. Esta abordagem assegura uma comunicação eficaz e clara.

Modelo de entrada de dados
Para os dados de entrada, como estamos pensando em um cadastro de usuário na aplicação, é importante que tenhamos 
insumos para identificá-lo como o email, uma senha (password) para que ele consiga fazer o login no futuro e seu 
nome de usuário (username). Dessa forma, podemos imaginar um modelo de entrada desta forma:


{
    "username": "joao123",
    "email": "joao123@email.com",
    "password": "segredo123"
}


<|-x-x-x-x-x-x-x-x-x-x-x-|aula03|-x-x-x-x-x-x-x-x-x-x-x-x-|>
=> Para a aplicação conseguir expor esse modelo na documentação, devemos criar uma classe do pydantic em 
nosso arquivo de schemas (fast_zero/schemas.py) que represente esse schema:

fast_zero/schemas.py

class UserSchema(BaseModel):
    username: str
    email: str
    password: str


<|-x-x-x-x-x-x-x-x-x-x-x-|aula03|-x-x-x-x-x-x-x-x-x-x-x-x-|>
=>Como já temos o endpoint definido, precisamos fazer a associação do modelo com ele. Para fazer isso basta que o 
endpoint receba um parâmetro e esse parâmetro esteja associado a um modelo via anotação de parâmetros:

fast_zero/app.py

from fast_zero.schemas import Message, UserSchema

# ...

@app.post('/users/', status_code=HTTPStatus.CREATED)
def create_user(user: UserSchema):
# ...


<|-x-x-x-x-x-x-x-x-x-x-x-|aula03|-x-x-x-x-x-x-x-x-x-x-x-x-|>
=> Dessa forma, o modelo de entrada, o que o endpoint espera receber 
já está documentado e aparecerá no swagger UI.

Para visualizar, temos que iniciar o servidor:
$ Execução no terminal!

task run


<|-x-x-x-x-x-x-x-x-x-x-x-|aula03|-x-x-x-x-x-x-x-x-x-x-x-x-|>
=>  Quando fazemos uma chamada com o método POST o esperado é que os dados criados sejam retornados ao cliente. 
Poderíamos usar o mesmo modelo de antes o UserSchema, porém, por uma questão de segurança, seria ideal não 
retornar a senha do usuário. Quanto menos ela trafegar na rede, melhor.

Desta forma, podemos pensar no mesmo schema, porém, sem a senha. Algo como:


{
    "username": "joao123",
    "email": "joao123@email.com"
}


<|-x-x-x-x-x-x-x-x-x-x-x-|aula03|-x-x-x-x-x-x-x-x-x-x-x-x-|>
=> Transcrevendo isso em um modelo do pydantic em nosso arquivo de schemas (fast_zero/schemas.py) temos isso:

fast_zero/schemas.py

class UserPublic(BaseModel):
    username: str
    email: str


<|-x-x-x-x-x-x-x-x-x-x-x-|aula03|-x-x-x-x-x-x-x-x-x-x-x-x-|>
=> Para aplicar um modelo a resposta do endpoint, temos que passar o modelo ao parâmetro response_model, 
como fizemos na aula passada:

from fast_zero.schemas import Message, UserPublic, UserSchema

# Código omitido

@app.post('/users/', status_code=HTTPStatus.CREATED, response_model=UserPublic)
def create_user(user: UserSchema):
    ...


<|-x-x-x-x-x-x-x-x-x-x-x-|aula03|-x-x-x-x-x-x-x-x-x-x-x-x-|>
=> Estendendo a validação com e-mail
Outro ponto que deve ser considerado é a capacidade de estender os campos usados pelo pydantic nas anotações de tipo.

Para garantir que o campo email realmente contenha um e-mail válido, podemos usar uma ferramenta especial do Pydantic 
que verifica se o e-mail tem o formato correto, como a presença de @ e um domínio válido.

Para isso, o pydantic tem um tipo de dado específico, o EmailStr. Que garante que o valor que será recebido pelo schema, 
seja de fato um e-mail em formato válido. Podemos adicioná-lo ao campo email nos modelos UserSchema e UserPublic:

from pydantic import BaseModel, EmailStr

class Message(BaseModel):
    message: str

class UserSchema(BaseModel):
    username: str
    email: EmailStr
    password: str

class UserPublic(BaseModel):
    username: str
    email: EmailStr


<|-x-x-x-x-x-x-x-x-x-x-x-|aula03|-x-x-x-x-x-x-x-x-x-x-x-x-|>
=> Traduzindo de forma literal, teríamos algo como: ImportError: email-validator não está
$ Execução no terminal!

poetry add "pydantic[email]"


<|-x-x-x-x-x-x-x-x-x-x-x-|aula03|-x-x-x-x-x-x-x-x-x-x-x-x-|>
=> Agora, tendo identificado a capacidade do Pydantic em validar as respostas e encontrarmos um erro devido à
 falta de implementação, podemos proceder com uma solução simples. Para começar, podemos utilizar diretamente os 
 dados recebidos em user e retorná-los. Esta ação simples já é suficiente para satisfazer o schema, pois o objeto 
 user contém os atributos email e username, esperados pelo modelo UserPublic:

fast_zero/app.py

@app.post('/users/', status_code=HTTPStatus.CREATED, response_model=UserPublic)
def create_user(user: UserSchema):
    return user


<|-x-x-x-x-x-x-x-x-x-x-x-|aula03|-x-x-x-x-x-x-x-x-x-x-x-x-|>
=> Criando um banco de dados falso
Para interagir com essas rotas de maneira prática, vamos criar uma lista provisória que simulará um 
banco de dados. Isso nos permitirá adicionar dados e entender o funcionamento do FastAPI. Portanto, 
introduzimos uma lista provisória para atuar como nosso "banco" e modificamos nosso endpoint para inserir
nossos modelos do Pydantic nessa lista:

fast_zero/app.py

from fast_zero.schemas import Message, UserDB, UserPublic, UserSchema

# código omitido

database = []  

# código omitido

@app.post('/users/', status_code=HTTPStatus.CREATED, response_model=UserPublic)
def create_user(user: UserSchema):
    user_with_id = UserDB(**user.model_dump(), id=len(database) + 1)  

    database.append(user_with_id)

    return user_with_id


<|-x-x-x-x-x-x-x-x-x-x-x-|aula03|-x-x-x-x-x-x-x-x-x-x-x-x-|>
=> Para simular um banco de dados de forma mais realista, é essencial que cada usuário tenha um ID único. 
Portanto, ajustamos nosso modelo de resposta pública (UserPublic) para incluir o ID do usuário. 
Também introduzimos um novo modelo, UserDB, que inclui tanto a senha do usuário quanto seu identificador único:

fast_zero/schemas.py

class UserPublic(BaseModel):
    id: int
    username: str
    email: EmailStr


class UserDB(UserSchema):
    id: int


<|-x-x-x-x-x-x-x-x-x-x-x-|aula03|-x-x-x-x-x-x-x-x-x-x-x-x-|>
=> Então, vamos escrever nosso teste. Esse teste para a rota POST precisa verificar se a criação de um 
novo usuário funciona corretamente. Enviamos uma solicitação POST com um novo usuário para a rota /users/. 
Em seguida, verificamos se a resposta tem o status HTTP 201 (Criado) e se a resposta contém o novo usuário criado.

tests/test_app.py

def test_create_user():
    client = TestClient(app)

    response = client.post(
        '/users/',
        json={
            'username': 'alice',
            'email': 'alice@example.com',
            'password': 'secret',
        },
    )
    assert response.status_code == HTTPStatus.CREATED
    assert response.json() == {
        'username': 'alice',
        'email': 'alice@example.com',
        'id': 1,
    }


<|-x-x-x-x-x-x-x-x-x-x-x-|aula03|-x-x-x-x-x-x-x-x-x-x-x-x-|>
=> Não se repita (DRY)
Você deve ter notado que a linha client = TestClient(app) está repetida na primeira linha dos dois testes que fizemos. 
Repetir código pode tornar o gerenciamento de testes mais complexo à medida que cresce, e é aqui que o princípio de "Não 
se repita" (DRY) entra em jogo. DRY incentiva a redução da repetição, criando um código mais limpo e manutenível.

Para solucionar essa repetição, podemos usar uma funcionalidade do pytest chamada Fixture. Uma fixture é como uma função 
que prepara dados ou estado necessários para o teste. Pode ser pensada como uma forma de não repetir a fase de Arrange de 
um teste, simplificando a chamada e não repetindo código.

Neste caso, criaremos uma fixture que retorna nosso client. Para fazer isso, precisamos criar o arquivo tests/conftest.py. 
O arquivo conftest.py é um arquivo especial reconhecido pelo pytest que permite definir fixtures que podem ser reutilizadas 
em diferentes módulos de teste em um projeto. É uma forma de centralizar recursos comuns de teste.

tests/conftest.py

import pytest
from fastapi.testclient import TestClient

from fast_zero.app import app


@pytest.fixture()
def client():
    return TestClient(app)


<|-x-x-x-x-x-x-x-x-x-x-x-|aula03|-x-x-x-x-x-x-x-x-x-x-x-x-|>
=> Agora, em vez de repetir a criação do client em cada teste, podemos simplesmente passar a fixture 
como um argumento nos nossos testes:

tests/test_app.py

from http import HTTPStatus


def test_root_deve_retornar_ok_e_ola_mundo(client):
    response = client.get('/')

    assert response.status_code == HTTPStatus.OK
    assert response.json() == {'message': 'Olá Mundo!'}


def test_create_user(client):
    response = client.post(
        '/users/',
        json={
            'username': 'alice',
            'email': 'alice@example.com',
            'password': 'secret',
        },
    )
    assert response.status_code == HTTPStatus.CREATED
    assert response.json() == {
        'username': 'alice',
        'email': 'alice@example.com',
        'id': 1,
    }


<|-x-x-x-x-x-x-x-x-x-x-x-|aula03|-x-x-x-x-x-x-x-x-x-x-x-x-|>
=> Implementando a Rota GET
A rota GET é usada para recuperar informações de um ou mais usuários do nosso sistema. No contexto do CRUD, 
o verbo HTTP GET está associado à operação "Read". Se a solicitação for bem-sucedida, a rota deve retornar o 
status HTTP 200 (OK).

Para estruturar a resposta dessa rota, podemos criar um novo modelo chamado UserList. Este modelo representará uma 
lista de usuários e contém apenas um campo chamado users, que é uma lista de UserPublic. Isso nos permite retornar 
múltiplos usuários de uma vez.

fast_zero/schemas.py

class UserList(BaseModel):
    users: list[UserPublic]


<|-x-x-x-x-x-x-x-x-x-x-x-|aula03|-x-x-x-x-x-x-x-x-x-x-x-x-|>
=> Com esse modelo definido, podemos criar nosso endpoint GET. Este endpoint retornará uma instância de UserList, 
que por sua vez contém uma lista de UserPublic. Cada UserPublic é criado a partir dos dados de um usuário em nosso 
banco de dados fictício.

fast_zero/app.py

from fast_zero.schemas import Message, UserDB, UserList, UserPublic, UserSchema

# código omitido

@app.get('/users/', response_model=UserList)
def read_users():
    return {'users': database}


<|-x-x-x-x-x-x-x-x-x-x-x-|aula03|-x-x-x-x-x-x-x-x-x-x-x-x-|>
=> Implementando o teste da rota de GET
Nosso teste da rota GET tem que verificar se a recuperação dos usuários está funcionando corretamente. 
Enviamos uma solicitação GET para a rota /users/. Em seguida, verificamos se a resposta tem o status HTTP 200 (OK) 
e se a resposta contém a lista de usuários.

tests/test_app.py

def test_read_users(client):
    response = client.get('/users/')
    assert response.status_code == HTTPStatus.OK
    assert response.json() == {
        'users': [
            {
                'username': 'alice',
                'email': 'alice@example.com',
                'id': 1,
            }
        ]
    }



<|-x-x-x-x-x-x-x-x-x-x-x-|aula03|-x-x-x-x-x-x-x-x-x-x-x-x-|>
=> Implementando a Rota PUT
A rota PUT é usada para atualizar as informações de um usuário existente. No contexto do CRUD, 
o verbo HTTP PUT está associado à operação "Update". Se a solicitação for bem-sucedida, a rota 
deve retornar o status HTTP 200 (OK). No entanto, se o usuário solicitado não for encontrado, 
deveríamos retornar o status HTTP 404 (Não Encontrado).

Uma característica importante do verbo PUT é que ele é direcionado a um recurso em específico. 
Nesse caso, estamos direcionando a alteração a um user em específico na base de dados. O identificador 
de user é o campo id que estamos usando nos modelos do Pydantic. Nesse caso, nosso endpoint deve receber 
o identificador de quem será alterado.

Para fazer essa identificação do recurso na URL usamos a seguinte combinação /caminho/recurso. 
Mas, como o recurso é dinâmico, ele deve ser enviado pelo cliente. Fazendo com que o valor 
tenha que ser uma variável. Dentro do FastAPI, as variáveis de recursos são descritas dentro 
de {}, como {user_id}. Fazendo com que o caminho completo do nosso endpoint seja '/users/{user_id}'. 
Da seguinte forma:

fast_zero/app.py

from fastapi import FastAPI, HTTPException

# ...

@app.put('/users/{user_id}', response_model=UserPublic)
def update_user(user_id: int, user: UserSchema):
    if user_id > len(database) or user_id < 1: 
        raise HTTPException(
            status_code=HTTPStatus.NOT_FOUND, detail='User not found'
        ) 

    user_with_id = UserDB(**user.model_dump(), id=user_id)
    database[user_id - 1] = user_with_id 

    return user_with_id


<|-x-x-x-x-x-x-x-x-x-x-x-|aula03|-x-x-x-x-x-x-x-x-x-x-x-x-|>
=> Para que essa variável definida na URL seja transferida para nosso endpoint, devemos adicionar um parâmetro na função 
com o mesmo nome da variável definida. Como def update_user(user_id: int) na linha em destaque.


<|-x-x-x-x-x-x-x-x-x-x-x-|aula03|-x-x-x-x-x-x-x-x-x-x-x-x-|>
=> Implementando o teste da rota de PUT
Nosso teste da rota PUT precisa verificar se a atualização de um usuário existente funciona corretamente. 
Enviamos uma solicitação PUT com as novas informações do usuário para a rota /users/{user_id}. Em seguida, 
verificamos se a resposta tem o status HTTP 200 (OK) e se a resposta contém o usuário atualizado.

tests/test_app.py

def test_update_user(client):
    response = client.put(
        '/users/1',
        json={
            'username': 'bob',
            'email': 'bob@example.com',
            'password': 'mynewpassword',
        },
    )
    assert response.status_code == HTTPStatus.OK
    assert response.json() == {
        'username': 'bob',
        'email': 'bob@example.com',
        'id': 1,
    }



<|-x-x-x-x-x-x-x-x-x-x-x-|aula03|-x-x-x-x-x-x-x-x-x-x-x-x-|>
=>Implementando a Rota DELETE
A rota DELETE é usada para excluir um usuário do nosso sistema. No contexto do CRUD, o verbo HTTP DELETE 
está associado à operação "Delete". Se a solicitação for bem-sucedida, a rota deve retornar o status HTTP 200 (OK).
No entanto, se o usuário solicitado não for encontrado, deveríamos retornar o status HTTP 404 (Não Encontrado).

Este endpoint receberá o ID do usuário que queremos excluir. Note que, estamos lançando uma exceção HTTP quando o ID 
do usuário está fora do range da nossa lista (simulação do nosso banco de dados). Quando conseguimos excluir o usuário 
com sucesso, retornamos a mensagem de sucesso em um modelo do tipo Message.

fast_zero/app.py

@app.delete('/users/{user_id}', response_model=Message)
def delete_user(user_id: int):
    if user_id > len(database) or user_id < 1:
        raise HTTPException(
            status_code=HTTPStatus.NOT_FOUND, detail='User not found'
        )

    del database[user_id - 1]

    return {'message': 'User deleted'}


<|-x-x-x-x-x-x-x-x-x-x-x-|aula03|-x-x-x-x-x-x-x-x-x-x-x-x-|>
=> Implementando o teste da rota de DELETE
Nosso teste da rota DELETE precisa verificar se a exclusão de um usuário existente funciona corretamente. 
Enviamos uma solicitação DELETE para a rota /users/{user_id}. Em seguida, verificamos se a resposta tem o 
status HTTP 200 (OK) e se a resposta contém uma mensagem informando que o usuário foi excluído.

tests/test_app.py

def test_delete_user(client):
    response = client.delete('/users/1')

    assert response.status_code == HTTPStatus.OK
    assert response.json() == {'message': 'User deleted'}


<|-x-x-x-x-x-x-x-x-x-x-x-|aula03|-x-x-x-x-x-x-x-x-x-x-x-x-|>
=>

<|-x-x-x-x-x-x-x-x-x-x-x-|aula03|-x-x-x-x-x-x-x-x-x-x-x-x-|>
=>

<|-x-x-x-x-x-x-x-x-x-x-x-|aula03|-x-x-x-x-x-x-x-x-x-x-x-x-|>
=>

<|-x-x-x-x-x-x-x-x-x-x-x-|aula03|-x-x-x-x-x-x-x-x-x-x-x-x-|>
=>

<|-x-x-x-x-x-x-x-x-x-x-x-|aula03|-x-x-x-x-x-x-x-x-x-x-x-x-|>
=>

<|-x-x-x-x-x-x-x-x-x-x-x-|aula03|-x-x-x-x-x-x-x-x-x-x-x-x-|>
=>

<|-x-x-x-x-x-x-x-x-x-x-x-|aula03|-x-x-x-x-x-x-x-x-x-x-x-x-|>
=>

<|-x-x-x-x-x-x-x-x-x-x-x-|aula03|-x-x-x-x-x-x-x-x-x-x-x-x-|>
=>

<|-x-x-x-x-x-x-x-x-x-x-x-|aula03|-x-x-x-x-x-x-x-x-x-x-x-x-|>
=>

<|-x-x-x-x-x-x-x-x-x-x-x-|aula03|-x-x-x-x-x-x-x-x-x-x-x-x-|>
=>

<|-x-x-x-x-x-x-x-x-x-x-x-|aula03|-x-x-x-x-x-x-x-x-x-x-x-x-|>
=>

<|-x-x-x-x-x-x-x-x-x-x-x-|aula03|-x-x-x-x-x-x-x-x-x-x-x-x-|>
=>

<|-x-x-x-x-x-x-x-x-x-x-x-|aula03|-x-x-x-x-x-x-x-x-x-x-x-x-|>
=>

<|-x-x-x-x-x-x-x-x-x-x-x-|aula03|-x-x-x-x-x-x-x-x-x-x-x-x-|>
=>